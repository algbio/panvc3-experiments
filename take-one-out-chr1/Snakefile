# Copyright (c) Tuukka Norri 2023
# Licenced under the MIT licence.

# vim: syntax=snakefile

REFERENCE_FA					= "../reference/hs37d5.fa"
TRUTH							= "../known-variants/HG001_GRCh37_1_22_v4.2.1_benchmark.vcf"
KNOWN_VARIANTS_PREFIX			= "../known-variants/ALL.chr"
KNOWN_VARIANTS_SUFFIX			= ".phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
SAMPLE_ID						= "HG001"
CHROMOSOMES						= ['1']
ALL_CHROMOSOMES					= ['1'] # For generating equivalent seeds when changing CHROMOSOMES
KNOWN_VARIANTS_REMOVED_SAMPLES	= ["NA12878"]
CONFIDENT_REGIONS				= "../known-variants/HG001_GRCh37_1_22_v4.2.1_benchmark.bed"

MEM_GB							= 168

READS_1							= "../reads/ERR194147_1.fastq.gz"
READS_2							= "../reads/ERR194147_2.fastq.gz"
SAMPLING_PROBABILITY			= "0.5"

WORKFLOWS = [
	("bowtie2",										"gatk"),
	("bowtie2",										"graphtyper2"),
	("vg-map",										"gatk"),
	("vg-giraffe",									"gatk"),
	("panvc3-bowtie2-f14-d25.mapq-recalculated",	"gatk"),
	("panvc3-bowtie2-f14-d25.max-mapq",				"gatk"),
	("panvc3-bowtie2-f25-d50.mapq-recalculated",	"gatk"),
	("panvc3-bowtie2-f25-d50.max-mapq",				"gatk")
]

BOWTIE2_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"reads_1":									READS_1,
	"reads_2":									READS_2
}

PANVC3_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"chromosomes":								CHROMOSOMES,
	"known_variants_prefix":					"input/known-variants.",
	"known_variants_suffix":					".vcf",
	"reads_1":									READS_1,
	"reads_2":									READS_2,
	"panvc3_conda_environment_path":			None,
	"vcf2multialign_conda_environment_path":	None
}

VG_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							"input/known-variants.1.vcf.gz",
	"reads_1":									READS_1,
	"reads_2":									READS_2,
	"mem_gb":									MEM_GB
}

GRAPHTYPER2_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							"input/known-variants.1.vcf.gz",
	"chromosomes":								CHROMOSOMES
}

GATK_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							"input/known-variants.1.vcf.gz",
	"chromosomes":								CHROMOSOMES,
	"ploidy":									2,
	"reads_1":									READS_1,
	"reads_2":									READS_2,
	"mem_mb":									43008
}


rule all:
	input:	expand("hap.py/{sample_id}.{wf[0]}.{wf[1]}.{vc_regions}.{eval_regions}.summary.csv", sample_id = SAMPLE_ID, wf = WORKFLOWS, vc_regions = ['chr1', 'chr1_selected'], eval_regions = ['chr1', 'chr1_selected'])


rule reads:
	input:
		reads_1	= "reads/ERR194147_1.sample0.5.fastq.gz",
		reads_2	= "reads/ERR194147_2.sample0.5.fastq.gz"


rule alignments:
	input:	expand("alignments/{sample_id}.{wf[0]}.bam", sample_id = SAMPLE_ID, wf = WORKFLOWS)


rule variants:
	input:	expand("variants/{sample_id}.{wf[0]}.{wf[1]}.{regions}.vcf.gz", sample_id = SAMPLE_ID, wf = WORKFLOWS, regions = ['chr1', 'chr1_selected'])


rule sample_reads:
	conda:		"../workflow/environments/biopython.yaml"
	threads:	16
	input:		"../reads/{reads}.fastq.gz"
	output:		"reads/{reads}.sample{sampling_probability}.fastq.gz"
	shell:		"bgzip -k -c -d -@ 8 {input} | python3 ../workflow/scripts/sample_reads.py {wildcards.sampling_probability} 22 | bgzip -c -@ 8 > {output}"

# To combine use:
# awk '{if ((NR-1) % 4 == 0) print "@"1+(NR-1)/4; else print }' <(zcat reads/ERR194147_1.sample05.fastq.gz) <(zcat reads/ERR194147_2.sample05.fastq.gz) | bgzip -c -@ 32 > reads/ERR194147.all.sample05.fastq.gz


rule subset_regions:
	input:		f"{CONFIDENT_REGIONS}"
	output:		"regions/chr{chromosome}_selected.bed"
	shell:		r"grep -E $'^{wildcards.chromosome}\t' {input} > {output}"


module common_rules:
	snakefile:	"../workflow/rules/common.smk"

use rule * from common_rules as common_*


module bowtie2_workflow:
	snakefile:	"../workflow/rules/bowtie2.smk"
	config:		BOWTIE2_CONFIG

use rule * from bowtie2_workflow as bowtie2_*


module panvc3_workflow:
	snakefile:	"../workflow/rules/panvc3.smk"
	config:		PANVC3_CONFIG

use rule * from panvc3_workflow as panvc3_*


module vg_workflow:
	snakefile:	"../workflow/rules/vg.smk"
	config:		VG_CONFIG

use rule * from vg_workflow as vg_*


module graphtyper2_workflow:
	snakefile:	"../workflow/rules/graphtyper2.smk"
	config:		GRAPHTYPER2_CONFIG

use rule * from graphtyper2_workflow as graphtyper2_*


module gatk_workflow:
	snakefile:	"../workflow/rules/gatk.smk"
	config:		GATK_CONFIG

use rule * from gatk_workflow as gatk_*


rule remove_sample_from_known_variants:
	message:			"Removing the tested sample from known variants"
	conda:				"../workflow/environments/bcftools.yaml"
	input:				expand(f"{KNOWN_VARIANTS_PREFIX}{{chromosome}}{KNOWN_VARIANTS_SUFFIX}", chromosome = CHROMOSOMES)
	output:				"input/known-variants.{chromosome}.vcf"
	params:
		removed_samples	= lambda _: ",".join(map(lambda x: f"^{x}", KNOWN_VARIANTS_REMOVED_SAMPLES))
	shell:				"bcftools view -s {params.removed_samples} -O v -o {output} {input}"


rule run_hap_py:
	conda:				"../workflow/environments/happy.yaml"
	threads:			2
	input:
		truth_vcf		= TRUTH,
		query_vcf		= "variants/{sample_id}.{wf}.{variant_caller}.{vc_regions}.vcf.gz",
		reference		= REFERENCE_FA,
		faidx			= f"{REFERENCE_FA}.fai",
		regions			= "regions/{eval_regions}.bed"
	output:				"hap.py/{sample_id}.{wf}.{variant_caller}.{vc_regions}.{eval_regions}.summary.csv"
	shell:				"hap.py"
						" --verbose"
						" --threads {threads}"
						" -r {input.reference}"
						" --target-regions {input.regions}"
						" -o hap.py/{wildcards.sample_id}.{wildcards.wf}.{wildcards.variant_caller}.{wildcards.vc_regions}.{wildcards.eval_regions}"
						" {input.truth_vcf}"
						" {input.query_vcf}"
