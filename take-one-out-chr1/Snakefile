# Copyright (c) Tuukka Norri 2023
# Licenced under the MIT licence.

# vim: syntax=snakefile

import re


REFERENCE_FA					= "../reference/hs37d5.fa"
TRUTH							= "../known-variants/HG001_GRCh37_1_22_v4.2.1_benchmark.vcf"
KNOWN_VARIANTS_PREFIX			= "../known-variants/ALL.chr"
KNOWN_VARIANTS_SUFFIX			= ".phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
SAMPLE_ID						= "HG001"
CHROMOSOMES						= ['1']
ALL_CHROMOSOMES					= ['1'] # For generating equivalent seeds when changing CHROMOSOMES
KNOWN_VARIANTS_REMOVED_SAMPLES	= ["NA12878"]
CONFIDENT_REGIONS				= "../known-variants/HG001_GRCh37_1_22_v4.2.1_benchmark.bed"

MEM_GB							= 168

READS_1							= "../reads/ERR194147_1.fastq.gz"
READS_2							= "../reads/ERR194147_2.fastq.gz"
SAMPLED_READS_1					= "reads/ERR194147_1.sample0.5.fastq.gz"
SAMPLED_READS_2					= "reads/ERR194147_2.sample0.5.fastq.gz"
SAMPLING_PROBABILITY			= "0.5"

PANVC2_FOUNDER_COUNT			= 2
PANVC2_BWA_THREADS				= 40

WORKFLOWS = [
	("bowtie2",										"gatk",			"chr1"),
	("bowtie2",										"gatk",			"chr1_selected"),
	#("bowtie2",										"graphtyper2",	"chr1"),
	#("bowtie2",										"graphtyper2",	"chr1_selected"),
	("vg-map",										"gatk",			"chr1"),
	("vg-map",										"gatk",			"chr1_selected"),
	("vg-giraffe",									"gatk",			"chr1"),
	("vg-giraffe",									"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f2-d2.mapq-recalculated",		"gatk",			"chr1"),
	("panvc3-bowtie2-f2-d2.mapq-recalculated",		"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f7-d10.mapq-recalculated",		"gatk",			"chr1"),
	("panvc3-bowtie2-f7-d10.mapq-recalculated",		"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f14-d25.mapq-recalculated",	"gatk",			"chr1"),
	("panvc3-bowtie2-f14-d25.mapq-recalculated",	"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f25-d50.mapq-recalculated",	"gatk",			"chr1"),
	("panvc3-bowtie2-f25-d50.mapq-recalculated",	"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f2-d2.max-mapq",				"gatk",			"chr1"),
	("panvc3-bowtie2-f2-d2.max-mapq",				"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f7-d10.max-mapq",				"gatk",			"chr1"),
	("panvc3-bowtie2-f7-d10.max-mapq",				"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f14-d25.max-mapq",				"gatk",			"chr1"),
	("panvc3-bowtie2-f14-d25.max-mapq",				"gatk",			"chr1_selected"),
	("panvc3-bowtie2-f25-d50.max-mapq",				"gatk",			"chr1"),
	("panvc3-bowtie2-f25-d50.max-mapq",				"gatk",			"chr1_selected"),
	("panvc2",										"gatk",			"chr1")
]


def reference_contigs():
	with open(f"{REFERENCE_FA}.gz.fai", "r") as fp:
		for line in fp:
			line = line.rstrip("\n")
			fields = line.split("\t")
			yield fields[0]


def non_founder_sequence_contigs():
	founder_sequence_contigs = frozenset(CHROMOSOMES)
	return filter(lambda x: x not in founder_sequence_contigs, reference_contigs())


panvc3_parameter_pattern = re.compile(
	r"^panvc3-.*- f(?P<founders> \d+) - d(?P<distance> \d+) [.] .*$",
	re.VERBOSE
)

def panvc3_parameters():
	def helper():
		for wf in WORKFLOWS:
			mm = panvc3_parameter_pattern.match(wf[0])
			if mm is not None:
				yield (mm.group("founders"), mm.group("distance"))
	
	def helper_2(items):
		is_first = True
		prev_item = None
		for item in items:
			if is_first:
				is_first = False
				prev_item = item
				yield item
				continue
			if prev_item != item:
				prev_item = item
				yield item
	
	return helper_2(sorted(helper()))

def panvc3_founder_counts():
	return map(lambda x: x[0], panvc3_parameters())

def panvc3_minimum_distances():
	return map(lambda x: x[1], panvc3_parameters())


BOWTIE2_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"reads_1":									SAMPLED_READS_1,
	"reads_2":									SAMPLED_READS_2
}

PANVC3_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"chromosomes":								CHROMOSOMES,
	"known_variants_prefix":					"input/known-variants.",
	"known_variants_suffix":					".vcf",
	"reads_1":									SAMPLED_READS_1,
	"reads_2":									SAMPLED_READS_2,
	"panvc3_conda_environment_path":			None,
	"vcf2multialign_conda_environment_path":	None
}

PANVC2_INDEX_CONFIG = {
	"benchmark_dir":							"benchmark/panvc2/index",
	"index_root":								"index/panvc2",
	"input_a2m":								[(x, f"panvc2/a2m/{x}.a2m") for x in reference_contigs()],
	"max_edit_distance":						10,
	"max_memory_MB":							1024 * MEM_GB,
	"max_read_length":							105,
	"n_refs":									1 + PANVC2_FOUNDER_COUNT,
	"tempdir":									"temp/panvc2/index"
}

PANVC2_CONFIG = {
	"benchmark_dir":							"benchmark/panvc2/index",
	"index_root":								"index/panvc2",
	"chromosome_list":							list(reference_contigs()),
	"max_edit_distance":						10,
	"max_memory_MB":							1024 * MEM_GB,
	"max_read_len":								105,
	"n_refs":									1 + PANVC2_FOUNDER_COUNT,
	"output_root":								f"panvc2/call/{SAMPLE_ID}",
	"ploidy":									2,
	"ploidy_file":								"GRCh37",
	"reads_file_1":								SAMPLED_READS_1,
	"reads_file_2":								SAMPLED_READS_2,
	"reads_all_path":							"panvc2/reads/all.fastq.gz",
	"sensibility":								5,
	"tempdir":									"temp/panvc2/call",
	"variant_caller":							["gatk"],
	"workflow":									["pg"],
	"call_regions":								CHROMOSOMES,
	"bwa_threads":								PANVC2_BWA_THREADS,
	"panvc2_subdir":							"lib/panvc2"
}

VG_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							"input/known-variants.1.vcf.gz",
	"reads_1":									SAMPLED_READS_1,
	"reads_2":									SAMPLED_READS_2,
	"mem_gb":									MEM_GB
}

GRAPHTYPER2_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							"input/known-variants.1.vcf.gz",
	"chromosomes":								CHROMOSOMES
}

GATK_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							"input/known-variants.1.vcf.gz",
	"chromosomes":								CHROMOSOMES,
	"ploidy":									2,
	"reads_1":									SAMPLED_READS_1,
	"reads_2":									SAMPLED_READS_2,
	"mem_mb":									43008
}


wildcard_constraints:
	chromosome_	= "|".join(map(lambda x: f"({re.escape(x)})", CHROMOSOMES))


rule all:
	input:	"summary.csv"


rule summarise:
	input:	expand("hap.py/{sample_id}.{wf[0]}.{wf[1]}.{wf[2]}.{eval_regions}.summary.csv", sample_id = SAMPLE_ID, wf = WORKFLOWS, eval_regions = ['chr1', 'chr1_selected'])
	output:	"summary.csv"
	shell:	"./summarise.sh > {output}"


rule reads:
	input:
		reads_1	= "reads/ERR194147_1.sample0.5.fastq.gz",
		reads_2	= "reads/ERR194147_2.sample0.5.fastq.gz"


rule panvc2_indexing_input:
	input:	expand("panvc2/a2m/{chromosome}.a2m", chromosome = reference_contigs())


rule alignments:
	input:	expand("alignments/{sample_id}.{wf[0]}.bam", sample_id = SAMPLE_ID, wf = WORKFLOWS)


rule variants:
	input:	expand("variants/{sample_id}.{wf[0]}.{wf[1]}.{regions}.vcf.gz", sample_id = SAMPLE_ID, wf = WORKFLOWS, regions = ['chr1', 'chr1_selected'])


rule sample_reads:
	conda:		"../workflow/environments/biopython.yaml"
	threads:	16
	input:		"../reads/{reads}.fastq.gz"
	output:		"reads/{reads}.sample{sampling_probability}.fastq.gz"
	shell:		"bgzip -k -c -d -@ 8 {input} | python3 ../workflow/scripts/sample_reads.py {wildcards.sampling_probability} 22 | bgzip -c -@ 8 > {output}"

# To combine use:
# awk '{if ((NR-1) % 4 == 0) print "@"1+(NR-1)/4; else print }' <(zcat reads/ERR194147_1.sample05.fastq.gz) <(zcat reads/ERR194147_2.sample05.fastq.gz) | bgzip -c -@ 32 > reads/ERR194147.all.sample05.fastq.gz


rule subset_regions:
	input:		f"{CONFIDENT_REGIONS}"
	output:		"regions/chr{chromosome}_selected.bed"
	shell:		r"grep -E $'^{wildcards.chromosome}\t' {input} > {output}"


module common_rules:
	snakefile:	"../workflow/rules/common.smk"

use rule * from common_rules as common_*


module bowtie2_workflow:
	snakefile:	"../workflow/rules/bowtie2.smk"
	config:		BOWTIE2_CONFIG

use rule * from bowtie2_workflow as bowtie2_*


module panvc3_workflow:
	snakefile:	"../workflow/rules/panvc3.smk"
	config:		PANVC3_CONFIG

use rule * from panvc3_workflow as panvc3_*


module panvc2_indexing_workflow:
	snakefile:	"../lib/panvc2/Snakefile.index"
	config:		PANVC2_INDEX_CONFIG

use rule * from panvc2_indexing_workflow as panvc2_index_*


module panvc2_workflow:
	snakefile:	"../lib/panvc2/Snakefile.call"
	config:		PANVC2_CONFIG

use rule * from panvc2_workflow as panvc2_call_*


module vg_workflow:
	snakefile:	"../workflow/rules/vg.smk"
	config:		VG_CONFIG

use rule * from vg_workflow as vg_*


module graphtyper2_workflow:
	snakefile:	"../workflow/rules/graphtyper2.smk"
	config:		GRAPHTYPER2_CONFIG

use rule * from graphtyper2_workflow as graphtyper2_*


module gatk_workflow:
	snakefile:	"../workflow/rules/gatk.smk"
	config:		GATK_CONFIG

use rule * from gatk_workflow as gatk_*


rule indexes:
	input:
		rules.bowtie2_index.output,
		rules.panvc2_index_pg_index.output,
		rules.vg_index.output,
		rules.vg_index_giraffe.output,
		expand(rules.panvc3_index_bowtie2.output, zip, founder_count = panvc3_founder_counts(), minimum_distance = panvc3_minimum_distances()),
		expand(rules.panvc3_index_msa.output.index, zip, founder_count = panvc3_founder_counts(), minimum_distance = panvc3_minimum_distances())


rule remove_sample_from_known_variants:
	message:			"Removing the tested sample from known variants"
	conda:				"../workflow/environments/bcftools.yaml"
	input:				expand(f"{KNOWN_VARIANTS_PREFIX}{{chromosome}}{KNOWN_VARIANTS_SUFFIX}", chromosome = CHROMOSOMES)
	output:				"input/known-variants.{chromosome}.vcf"
	params:
		removed_samples	= lambda _: ",".join(map(lambda x: f"^{x}", KNOWN_VARIANTS_REMOVED_SAMPLES))
	shell:				"bcftools view -s {params.removed_samples} -O v -o {output} {input}"


rule prepare_panvc2_input_founders:
	input:				"panvc3/founder-sequences/chromosome.{chromosome_}.f2.d2.a2m.gz"
	output:				"panvc2/a2m/{chromosome_}.a2m"
	shell:				"gunzip -c -k {input} | sed -E 's/^[>][^\t]+\t(.*)$/>\1/' > {output}"


rule prepare_panvc2_input_rest:
	conda:				"../workflow/environments/biopython.yaml"
	params:
		founder_count	= PANVC2_FOUNDER_COUNT,
	input:				"panvc3/founder-sequences/remaining-contigs.fa.gz"
	output:				expand("panvc2/a2m/{chromosome}.a2m", chromosome = non_founder_sequence_contigs())
	shell:				"gunzip -c -k {input} | python3 ../workflow/scripts/prepare_panvc2_input_rest.py {params.founder_count} panvc2/a2m/"


# FIXME: The script always adds the hs37d5 chromosome 1 header.
rule fix_panvc2_output:
	input:				"panvc2/call/{sample_id}/ext_vc/1/variants.normalized.gatk.vcf"
	output:				"variants/{sample_id}.panvc2.gatk.chr1.vcf"
	shell:				"mkdir -p variants && scripts/add_contig_header_to_panvc2_output.sh {input} {output}" 


rule run_hap_py:
	conda:				"../workflow/environments/happy.yaml"
	threads:			2
	input:
		truth_vcf		= TRUTH,
		query_vcf		= "variants/{sample_id}.{wf}.{variant_caller}.{vc_regions}.vcf.gz",
		reference		= REFERENCE_FA,
		faidx			= f"{REFERENCE_FA}.fai",
		regions			= "regions/{eval_regions}.bed"
	output:				"hap.py/{sample_id}.{wf}.{variant_caller}.{vc_regions}.{eval_regions}.summary.csv"
	shell:				"hap.py"
						" --verbose"
						" --threads {threads}"
						" -r {input.reference}"
						" --target-regions {input.regions}"
						" -o hap.py/{wildcards.sample_id}.{wildcards.wf}.{wildcards.variant_caller}.{wildcards.vc_regions}.{wildcards.eval_regions}"
						" {input.truth_vcf}"
						" {input.query_vcf}"


ruleorder: common_index_bam > panvc2_call_index_alignments
ruleorder: panvc2_call_gatk_index_ref > gatk_index_ref
ruleorder: panvc2_call_samtools_index_ref > common_index_fasta_fai
ruleorder: prepare_panvc2_input_founders > prepare_panvc2_input_rest
