# Copyright (c) Tuukka Norri 2023
# Licenced under the MIT licence.

# vim: syntax=snakefile


REFERENCE_FA					= "../reference/hs37d5.fa"
TRUTH							= "../known-variants/HG002_SVs_Tier1_v0.6.normalised.vcf.gz"
KNOWN_VARIANTS_PREFIX			= "../known-variants/ALL.chr"
KNOWN_VARIANTS_SUFFIX			= ".phase3_shapeit2_mvncall_integrated_v5b.20130502.genotypes.vcf.gz"
SAMPLE_ID						= "NA24385"
CHROMOSOMES						= ['1']
READS_1							= "../reads/HG002_HiSeq30x_subsampled_R1.fastq.gz",
READS_2							= "../reads/HG002_HiSeq30x_subsampled_R2.fastq.gz"
CONFIDENT_REGIONS				= "../known-variants/HG002_SVs_Tier1_v0.6.bed"

REFERENCE_FAI					= f"{REFERENCE_FA}.fai"
REFERENCE_BWT					= f"{REFERENCE_FA}.bwt"
REFERENCE_GZ					= f"{REFERENCE_FA}.gz"

MEM_GB							= 168

# Remember to check the founder counts from vcf2multialign's output with each given distance.
WORKFLOWS = [
	#("panvc3-bowtie2-f14-d25.mapq-recalculated",	"manta"),
	#("panvc3-bowtie2-f14-d25.mapq-recalculated",	"gridss"),
	#("panvc3-bowtie2-f14-d25.max-mapq",				"manta"),
	#("panvc3-bowtie2-f14-d25.max-mapq",				"gridss"),
	#("panvc3-bowtie2-f25-d50.mapq-recalculated",	"manta"),
	#("panvc3-bowtie2-f25-d50.mapq-recalculated",	"gridss"),
	#("panvc3-bowtie2-f25-d50.max-mapq",				"manta"),
	#("panvc3-bowtie2-f25-d50.max-mapq",				"gridss"),
	("bowtie2",										"manta"),
	#("bowtie2",										"gridss"),
	("vg-giraffe",									"manta"),
	#("vg-giraffe",									"gridss"),
	("vg-map",										"manta"),
	#("vg-map",										"gridss"),
	#("reference-flow",								"manta"),
	#("reference-flow",								"gridss")
]

BOWTIE2_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"reads_1":									READS_1,
	"reads_2":									READS_2
}

PANVC3_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"chromosomes":								CHROMOSOMES,
	"known_variants_prefix":					KNOWN_VARIANTS_PREFIX,
	"known_variants_suffix":					KNOWN_VARIANTS_SUFFIX,
	"reads_1":									READS_1,
	"reads_2":									READS_2,
	"panvc3_conda_environment_path":			None,
	"vcf2multialign_conda_environment_path":	None
}

VG_CONFIG = {
	"alignment_id":								SAMPLE_ID,
	"reference":								REFERENCE_FA,
	"known_variants":							f"{KNOWN_VARIANTS_PREFIX}1{KNOWN_VARIANTS_SUFFIX}",
	"reads_1":									READS_1,
	"reads_2":									READS_2,
	"mem_gb":									MEM_GB
}


from snakemake.utils import min_version
min_version("7.32.4")


wildcard_constraints:
	sample_id		= r"[^.]+",
	aligner			= r"[^.]+",
	filter			= r"(all)|(pass)",
	vc_regions		= r"(all)|(1)",
	eval_regions	= r"(chr1)|(chr1_selected)"


rule all:
	input:		"summary.tsv"


rule summarise:
	input:		expand("truvari/{sample_id}.{wf[0]}.{wf[1]}.{vc_regions}.{eval_regions}.{filter}/summary.json", sample_id = SAMPLE_ID, wf = WORKFLOWS, vc_regions = ["all", "1"], eval_regions = ["chr1", "chr1_selected"], filter = ["all", "pass"])
	output:		"summary.tsv"
	shell:		"python3 summarise.py > {output}"


rule bwa_index:	# Needed by gridss
	conda:		"../workflow/environments/bwa.yaml"
	input:		"{reference}.fa"
	output:		multiext("{reference}.fa", ".amb", ".ann", ".bwt", ".pac", ".sa")
	shell:		"bwa index {input}"


rule subset_regions:
	input:		f"{CONFIDENT_REGIONS}"
	output:		"regions/chr{chromosome}_selected.bed"
	shell:		r"grep -E $'^{wildcards.chromosome}\t' {input} > {output}"


module common_rules:
	snakefile:	"../workflow/rules/common.smk"

use rule * from common_rules as common_*


module bowtie2_workflow:
	snakefile:	"../workflow/rules/bowtie2.smk"
	config:		BOWTIE2_CONFIG

use rule * from bowtie2_workflow as bowtie2_*


module panvc3_workflow:
	snakefile:	"../workflow/rules/panvc3.smk"
	config:		PANVC3_CONFIG

use rule * from panvc3_workflow as panvc3_*


module vg_workflow:
	snakefile:	"../workflow/rules/vg.smk"
	config:		VG_CONFIG

use rule * from vg_workflow as vg_*


# Enable when this is resolved: https://github.com/snakemake/snakemake/issues/2499
#configfile: "config/reference-flow.yaml"
#
#module reference_flow_workflow:
#	snakefile:	"lib/reference_flow/snakemake/Snakefile"
#	config: config["reference_flow"]
#
#use rule * from reference_flow_workflow as reference_flow_*
#
#use rule all from reference_flow_workflow as reference_flow_all with:
#	benchmark:	"benchmark/reference_flow"

rule reference_flow_run:
	threads:		workflow.cores
	benchmark:		"benchmark/run_reference_flow_sp/{sample_id}"
	input:
		reads_1		= READS_1,
		reads_2		= READS_2
	output:			"alignments/{sample_id}.reference-flow.sam"
	params:
		rf_output	= "reference-flow/run/experiments/{sample_id}/thrds0_S1_b1000_ld1/chr1-refflow-10-thrds0_S1_b1000_ld1-liftover.sam"
	shell:			"snakemake --printshellcmds --cores {threads} --snakefile lib/reference_flow/snakemake/Snakefile --use-conda --conda-prefix ../conda-env --configfile config/reference-flow-sp.yaml -- && mkdir -p alignments && mv {params.rf_output} {output}"


def manta_region_arg(wildcards):
	if 'all' == wildcards.vc_regions:
		return ""
	return f"--region={wildcards.vc_regions}"


rule manta_config:
	conda:			"../workflow/environments/manta.yaml"
	input:
		reference	= REFERENCE_FA,
		alignments	= "alignments/{sample_id}.{wf}.sorted.bam",
		index		= "alignments/{sample_id}.{wf}.sorted.bam.bai"
	params:
		region_arg	= manta_region_arg
	output:			"manta/{sample_id}.{wf}.{vc_regions}/runWorkflow.py"
	shell:			"configManta.py --runDir='manta/{wildcards.sample_id}.{wildcards.wf}.{wildcards.vc_regions}' --referenceFasta='{input.reference}' --bam={input.alignments} {params.region_arg}"


rule manta_run:
	conda:			"../workflow/environments/manta.yaml"
	threads:		workflow.cores
	input:			"manta/{sample_id}.{wf}.{vc_regions}/runWorkflow.py"
	output:			"manta/{sample_id}.{wf}.{vc_regions}/results/variants/diploidSV.vcf.gz"
	shell:			f"{{input}} -j {{threads}} -g {MEM_GB}"


rule gridss_subset_alignments:
	conda:			"../workflow/environments/gridss.yaml"
	threads:		workflow.cores
	input:
		alignments	= "alignments/{sample_id}.{wf}.sorted.bam",
		regions		= "regions/chr{vc_regions}.bed"
	output:			"gridss/{sample_id}.{wf}.subset.{vc_regions}.bam"
	shell:			"gridss_extract_overlapping_fragments --threads {threads} --targetbed {input.regions} --output {output} {input.alignments}"


def gridss_alignment_input(wildcards):
	if "all" == wildcards.vc_regions:
		return "alignments/{sample_id}.{wf}.sorted.bam"
	else:
		return "gridss/{sample_id}.{wf}.subset.{vc_regions}.bam"

rule gridss_run:
	conda:			"../workflow/environments/gridss.yaml"
	threads:		workflow.cores
	input:
		reference	= REFERENCE_FA,
		ref_fai		= REFERENCE_FAI,
		ref_bwt		= REFERENCE_BWT,
		alignments	= gridss_alignment_input
	output:			
		variants	= "gridss/{sample_id}.{wf}.{vc_regions}.vcf.gz",
		tempdir		= temp(directory("temp/gridss/{sample_id}.{wf}.{vc_regions}"))
	shell:			"mkdir -p {output.tempdir} && gridss --threads {threads} --workingdir {output.tempdir} --reference {input.reference} --output {output.variants} {input.alignments}"


def truvari_input(suffix):
	def helper(wildcards):
		if "manta" == wildcards.variant_caller:
			return f"{{variant_caller}}/{{sample_id}}.{{wf}}.{{vc_regions}}/results/variants/diploidSV.normalised.vcf.gz{suffix}"
		else:
			return "{variant_caller}/{sample_id}.{wf}.{vc_regions}.normalised.vcf.gz"
	return helper

def truvari_dir_name(wildcards):
	return "truvari/{sample_id}.{wildcards.wf}.{wildcards.variant_caller}.{wildcards.vc_regions}.{wildcards.eval_regions}.{wildcards.filter}"

def truvari_filter_arg(wildcards):
	return "--passonly" if "pass" == wildcards.filter else ""

rule truvari_run:
	conda:			"../workflow/environments/truvari.yaml"
	input:
		truth		= TRUTH,
		reference	= REFERENCE_GZ,
		variants	= truvari_input(""),
		index		= truvari_input(".tbi"),
		regions		= "regions/{eval_regions}.bed"
	output:			"truvari/{sample_id}.{wf}.{variant_caller}.{vc_regions}.{eval_regions}.{filter}/summary.json"
	params:
		truvari_dir	= truvari_dir_name,
		filter_arg	= truvari_filter_arg
	shell:			"rmdir {params.truvari_dir} && truvari bench -b {input.truth} -c {input.variants} -o {params.truvari_dir} --reference {input.reference} --includebed {input.regions} --sizemin 0 --sizefilt 0 {params.filter_arg}"
